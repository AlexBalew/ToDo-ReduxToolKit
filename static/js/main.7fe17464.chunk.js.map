{"version":3,"sources":["api/Todolists.api.ts","components/editableSpan/EditableSpan.tsx","components/addItemForm/AddItemForm.tsx","api/apiConfig/index.ts","utils/error-utils.ts","Variables/Variables.ts","Reducers/authReducer.ts","Reducers/app-reducer.ts","components/errorSnackBar/ErrorSnackBar.tsx","Reducers/todolist-reducer.ts","Reducers/tasks.reducer.ts","Reducers/reducer/all-reducer.ts","store/mainReducer.tsx","store/store.tsx","components/login/login.tsx","components/task/Task.tsx","components/todoList/todolist/todolist.tsx","components/todoList/TodoLists.tsx","components/app/App.tsx","reportWebVitals.ts","index.tsx","components/task/Tasks.module.css"],"names":["TaskStatuses","TaskPriorities","EditableSpan","React","memo","props","useState","editMode","setEditMode","title","setTitle","onChange","e","currentTarget","value","autoFocus","onBlur","onKeyPress","key","disabled","todolist","entityStatus","className","s","taskName","onDoubleClick","AddItemForm","callback","label","error","setError","style","height","TextField","size","variant","trim","helperText","background","borderRadius","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","tasksAPI","taskId","model","description","deadline","status","priority","startDate","authAPI","authParams","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","authTC","createAsyncThunk","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","errors","fieldsErrors","undefined","logOutTC","sliceAuth","createSlice","name","initialState","reducers","isLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","initializeAppTC","sliceApp","isAppInitialized","setAppIsInitializedStatusAC","Alert","forwardRef","ref","elevation","ErrorSnackBar","useSelector","app","useDispatch","isOpen","Snackbar","open","autoHideDuration","onClose","event","reason","severity","getTodolistsTC","param","todolists","removeTodolistsTC","changeTDlEntityStatusAC","tlID","id","addTodolistTC","todoList","item","changeTodolistTitleTC","sliceTodolist","changeTDlFilterAC","index","findIndex","tl","filter","map","splice","unshift","getTasksTC","todolistID","tasks","items","deleteTaskTC","then","catch","addTaskTC","task","changeTaskStatusTC","getState","find","t","changeTaskTitleTC","sliceTasks","forEach","todoListId","todolistsReducer","reducer","authReducer","appReducer","tasksReducer","mainReducer","combineReducers","todoLists","login","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","match","setFieldError","field","to","Grid","container","justifyContent","m","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","Task","onChangeCheckedHandler","useCallback","changeTaskStatus","Completed","New","onChangeTitleHandler","newTitle","onChangeTaskTitle","completedTask","maxWidth","display","alignItems","flexGrow","ThemeProvider","theme","deleteTask","marginRight","Delete","TodoList","useEffect","demo","allFilter","changeFilter","activeFilter","completedFilter","ChangeTDListTitle","changeTDListTitleAPP","addTaskBridge","addTask","tasksForTDList","removeTDFunc","listStyle","paddingLeft","TodoLists","todolistsFromState","tasksFromState","addTDList","padding","spacing","filteredTasks","Paper","createTheme","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","App","isInitialized","logOutHandler","minHeight","paddingBottom","AppBar","position","Toolbar","edge","Menu","Typography","align","LinearProgress","Container","fixed","path","element","marginTop","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reRenderEntireApp","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7fe17464.chunk.js","sourcesContent":["import { instance } from './apiConfig';\r\n\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  addedDate: string;\r\n  order: number;\r\n};\r\n\r\n/* type CreateTDListResType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n}\r\n\r\ntype UpdateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}\r\n\r\ntype DeleteTodolistResponseType = { ///all types in generic one\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n} */\r\n\r\nexport type FieldErrorType = { error: string; field: string };\r\nexport type ResponseType<T = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  fieldsErrors?: Array<FieldErrorType>;\r\n  // fieldsErrors: Array<string>\r\n  data: T;\r\n};\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low,\r\n  Middle,\r\n  Hi,\r\n  Urgently,\r\n  Later,\r\n}\r\n\r\nexport type ResponseTaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\n\r\nexport type ResponseTasksType = {\r\n  items: Array<ResponseTaskType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n\r\nexport type UpdateModelType = {\r\n  title: string;\r\n  description: string | null;\r\n  status: TaskStatuses;\r\n  priority: number;\r\n  startDate: string | null;\r\n  deadline: string | null;\r\n};\r\n\r\nexport const todolistsAPI = {\r\n  getTDLists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists');\r\n  },\r\n  createTDLists(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title });\r\n  },\r\n  deleteTDLists(todolistId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n  },\r\n  updateTDLists(todolistId: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolistId}`, { title });\r\n  },\r\n};\r\n\r\nexport const tasksAPI = {\r\n  getTasks(todolistId: string) {\r\n    return instance.get<ResponseTasksType>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: ResponseTaskType }>>(\r\n      `todo-lists/${todolistId}/tasks`,\r\n      { title },\r\n    );\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateModelType) {\r\n    return instance.put<ResponseType<{ data: ResponseTaskType }>>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`,\r\n      {\r\n        title: model.title,\r\n        description: model.description,\r\n        deadline: model.deadline,\r\n        status: model.status,\r\n        priority: model.priority,\r\n        startDate: model.startDate,\r\n      },\r\n    );\r\n  },\r\n};\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\n\r\nexport const authAPI = {\r\n  login(authParams: LoginParamsType) {\r\n    return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, authParams);\r\n  },\r\n  authMe() {\r\n    return instance.get<ResponseType<{ id: number; email: string; login: string }>>(\r\n      'auth/me',\r\n    );\r\n  },\r\n  logOut() {\r\n    return instance.delete<ResponseType<{ userId?: number }>>('/auth/login');\r\n  },\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\nimport s from '../task/Tasks.module.css';\r\n\r\nimport { TodolistDomainType } from 'Reducers/todolist-reducer';\r\n\r\nexport type editableSpanPropsType = {\r\n  title: string;\r\n  onChange: (newValue: string) => void;\r\n  todolist: TodolistDomainType;\r\n};\r\n\r\nexport const EditableSpan = React.memo((props: editableSpanPropsType) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [title, setTitle] = useState('');\r\n\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    setTitle(props.title);\r\n  };\r\n  const setViewNode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      setEditMode(false);\r\n      props.onChange(title);\r\n    }\r\n    return props.title;\r\n  };\r\n\r\n  return editMode ? (\r\n    <input\r\n      onChange={onChangeTitleHandler}\r\n      value={title}\r\n      /* eslint-disable-next-line jsx-a11y/no-autofocus */\r\n      autoFocus\r\n      onBlur={setViewNode}\r\n      onKeyPress={onKeyPressHandler}\r\n      disabled={props.todolist.entityStatus === 'loading'}\r\n      className={s.taskName}\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode} className={s.taskName}>\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\nimport { AddBox } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nexport type AddItemFormPropsType = {\r\n  callback: (title: string) => void;\r\n  disabled?: boolean;\r\n  label?: string;\r\n};\r\n\r\nexport const AddItemForm = React.memo(\r\n  ({ callback, disabled = false, label = 'new task title' }: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const onChangeNewTaskTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (error !== null) {\r\n        setError('');\r\n      }\r\n      if (e.key === 'Enter' && title.trim() !== '') {\r\n        callback(title);\r\n        setTitle('');\r\n      }\r\n      if (e.key === 'Enter' && title.trim() === '') {\r\n        setError('Insert Title');\r\n      }\r\n    };\r\n\r\n    const addTaskButton = () => {\r\n      if (title.trim() !== '') {\r\n        callback(title);\r\n        setTitle('');\r\n      } else {\r\n        setError('Insert new title');\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div style={{ height: '50px' }}>\r\n        <TextField\r\n          disabled={disabled}\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          value={title}\r\n          onChange={onChangeNewTaskTitleHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          error={!!error}\r\n          label={label || 'Title'}\r\n          helperText={error}\r\n          style={{ background: '#FFFFFF', borderRadius: 5 }}\r\n        />\r\n        <IconButton\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={addTaskButton}\r\n          disabled={disabled}\r\n        >\r\n          <AddBox />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import axios from 'axios';\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: { 'API-KEY': 'ae005362-3cd1-4901-a9c5-790f2698eec1' },\r\n};\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  ...settings,\r\n});\r\n","import {Dispatch} from \"redux\";\r\n\r\nimport {ResponseType} from \"../api/Todolists.api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../Reducers/app-reducer\";\r\n\r\nimport { zero } from \"Variables/Variables\";\r\n\r\nexport const handleServerAppError = <T = {}>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[zero]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'some error has occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport const handleServerNetworkError = <T = {}>(error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}","export const zero = 0;\r\nexport const three = 3;\r\nexport const four = 4;\r\nexport const one = 1;\r\nexport const five = 5;\r\nexport const two = 2;\r\nexport const six = 6;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { authAPI, FieldErrorType, LoginParamsType } from '../api/Todolists.api';\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\r\n\r\nimport { setAppStatusAC } from './app-reducer';\r\n\r\nimport { zero } from 'Variables/Variables';\r\n\r\nexport const authTC = createAsyncThunk<\r\n  { isLoggedIn: boolean },\r\n  LoginParamsType,\r\n  { rejectValue: { errors: Array<string>; fieldsErrors?: Array<FieldErrorType> } }\r\n>('auth/login', async (authParams, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }));\r\n  try {\r\n    const res = await authAPI.login(authParams);\r\n    if (res.data.resultCode === zero) {\r\n      thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n      return { isLoggedIn: true };\r\n    }\r\n    handleServerAppError(res.data, thunkAPI.dispatch);\r\n    return thunkAPI.rejectWithValue({\r\n      errors: res.data.messages,\r\n      fieldsErrors: res.data.fieldsErrors,\r\n    });\r\n  } catch (error: any) {\r\n    handleServerNetworkError(error, thunkAPI.dispatch);\r\n    return thunkAPI.rejectWithValue({\r\n      errors: [error.message],\r\n      fieldsErrors: undefined,\r\n    });\r\n  }\r\n});\r\n\r\nexport const logOutTC = createAsyncThunk('auth/logOut', async (authParams, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }));\r\n  try {\r\n    const res = await authAPI.logOut();\r\n    if (res.data.resultCode === zero) {\r\n      // thunkAPI.dispatch(clearTodoReduxAC())\r\n      thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n      return;\r\n    }\r\n    handleServerAppError(res.data, thunkAPI.dispatch);\r\n    // eslint-disable-next-line consistent-return\r\n    return thunkAPI.rejectWithValue('');\r\n  } catch (error: any) {\r\n    handleServerNetworkError(error, thunkAPI.dispatch);\r\n    // eslint-disable-next-line consistent-return\r\n    return thunkAPI.rejectWithValue('');\r\n  }\r\n});\r\n\r\nexport const sliceAuth = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isLoggedIn: false,\r\n  },\r\n  reducers: {\r\n    isLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.isLoggedIn = action.payload.value;\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(authTC.fulfilled, state => {\r\n      /* if (action.payload) {\r\n                 state.isLoggedIn = action.payload.isLoggedIn\r\n             } */\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.isLoggedIn = true;\r\n    });\r\n    builder.addCase(logOutTC.fulfilled, state => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.isLoggedIn = false;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { isLoggedInAC } = sliceAuth.actions;\r\n\r\n// __thunks\r\n\r\n/* export const authTC = (authParams: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(authParams)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(isLoggedInAC({value: true}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n} */\r\n\r\n/*\r\nexport const logOutTC_ = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(clearTodoReduxAC())\r\n                    dispatch(isLoggedInAC({value: false}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n*/\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { authAPI } from '../api/Todolists.api';\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\n\r\nimport { isLoggedInAC } from './authReducer';\r\n\r\nimport { zero } from 'Variables/Variables';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type InitialStateType = {\r\n  status: RequestStatusType;\r\n  error: string | null;\r\n  isAppInitialized: boolean;\r\n};\r\n\r\nexport const initializeAppTC = createAsyncThunk(\r\n  'app/initializeApp',\r\n  async (authParams, { dispatch }) => {\r\n    try {\r\n      const res = await authAPI.authMe();\r\n      if (res.data.resultCode === zero) {\r\n        dispatch(isLoggedInAC({ value: true }));\r\n      } else {\r\n        dispatch(isLoggedInAC({ value: false }));\r\n      }\r\n      // dispatch(setAppIsInitializedStatusAC({isAppInitialized: true})) // эта логика уже в соотв. билдере\r\n    } catch (error: any) {\r\n      handleServerNetworkError(error, dispatch);\r\n    }\r\n  },\r\n);\r\n\r\nexport const sliceApp = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    status: 'idle',\r\n    error: null,\r\n    isAppInitialized: false,\r\n  } as InitialStateType,\r\n  reducers: {\r\n    setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.error = action.payload.error;\r\n    },\r\n    setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.status = action.payload.status;\r\n    },\r\n    setAppIsInitializedStatusAC(\r\n      state,\r\n      action: PayloadAction<{ isAppInitialized: boolean }>,\r\n    ) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.isAppInitialized = action.payload.isAppInitialized;\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(initializeAppTC.fulfilled, state => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      state.isAppInitialized = true;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { setAppErrorAC, setAppStatusAC } = sliceApp.actions;\r\n\r\n// __thunk\r\n\r\n/*\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.authMe()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(isLoggedInAC({value: true}))\r\n            } else {\r\n                dispatch(isLoggedInAC({value: false}))\r\n            }\r\n            dispatch(setAppIsInitializedStatusAC({isAppInitialized: true}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n} */\r\n","import React from 'react';\r\n\r\nimport { AlertProps, Snackbar } from '@mui/material';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setAppErrorAC } from 'Reducers/app-reducer';\r\nimport { MainReducerType } from 'store/mainReducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => (\r\n    // eslint-disable-next-line react/jsx-props-no-spreading\r\n  <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\r\n));\r\n\r\nexport const ErrorSnackBar = () => {\r\n  // const [open, setOpen] = React.useState(true);\r\n\r\n  const error = useSelector<MainReducerType, string | null>(state => state.app.error);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC({ error: null }));\r\n    // setOpen(false);\r\n  };\r\n\r\n  const isOpen = error !== null;\r\n\r\n  return (\r\n    <Snackbar open={isOpen} autoHideDuration={3000} /* onClose={handleClose} */>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { todolistsAPI, TodolistType } from '../api/Todolists.api';\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\r\n\r\nimport { RequestStatusType, setAppStatusAC } from './app-reducer';\r\n\r\nimport { one, zero } from 'Variables/Variables';\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const getTodolistsTC = createAsyncThunk(\r\n  'todolists/getTodolists',\r\n  // eslint-disable-next-line consistent-return\r\n  async (param, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    const res = await todolistsAPI.getTDLists();\r\n    try {\r\n      dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n      return { todolists: res.data };\r\n    } catch (error: any) {\r\n      handleServerNetworkError(error, dispatch);\r\n    }\r\n  },\r\n);\r\n\r\nexport const removeTodolistsTC = createAsyncThunk(\r\n  'todolists/removeTodolists',\r\n    // eslint-disable-next-line consistent-return\r\n  async (param: { todolistId: string }, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    dispatch(changeTDlEntityStatusAC({ status: 'loading', tlID: param.todolistId }));\r\n    const res = await todolistsAPI.deleteTDLists(param.todolistId);\r\n    try {\r\n      if (res.data.resultCode === zero) {\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n        return { id: param.todolistId };\r\n      }\r\n      handleServerAppError(res.data, dispatch);\r\n    } catch (error: any) {\r\n      handleServerNetworkError(error, dispatch);\r\n    }\r\n  },\r\n);\r\n\r\nexport const addTodolistTC = createAsyncThunk(\r\n  'todolists/addTodolist',\r\n    // eslint-disable-next-line consistent-return\r\n  async (param: { title: string }, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    const res = await todolistsAPI.createTDLists(param.title);\r\n    try {\r\n      if (res.data.resultCode === zero) {\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n        return { todoList: res.data.data.item };\r\n      }\r\n      handleServerAppError(res.data, dispatch);\r\n    } catch (error: any) {\r\n      handleServerNetworkError(error, dispatch);\r\n    }\r\n  },\r\n);\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk(\r\n  'todolists/changeTodolistTitle',\r\n    // eslint-disable-next-line consistent-return\r\n  async (param: { todolistId: string; title: string }, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    const res = await todolistsAPI.updateTDLists(param.todolistId, param.title);\r\n    try {\r\n      if (res.data.resultCode === zero) {\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n        return { todolistId: param.todolistId, title: param.title };\r\n      }\r\n      handleServerAppError(res.data, dispatch);\r\n    } catch (error: any) {\r\n      handleServerNetworkError(error, dispatch);\r\n    }\r\n  },\r\n);\r\n\r\nexport const sliceTodolist = createSlice({\r\n  name: 'todolists',\r\n  initialState: [] as Array<TodolistDomainType>,\r\n  reducers: {\r\n    /*    removeTDlAC(state, action: PayloadAction<{ id: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            }, */\r\n    /*  addTDlAC(state, action: PayloadAction<{ todoList: TodolistType }>) {\r\n              state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n          }, */\r\n    /* addTodolist(state, action: PayloadAction<{ todoList: TodolistType }>) {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        }, */\r\n    /* changeTDlTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        }, */\r\n    changeTDlFilterAC(\r\n      state,\r\n      action: PayloadAction<{ filter: FilterType; todolistId: string }>,\r\n    ) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.todolistId);\r\n      // eslint-disable-next-line no-param-reassign\r\n      state[index].filter = action.payload.filter;\r\n    },\r\n    changeTDlEntityStatusAC(\r\n      state,\r\n      action: PayloadAction<{ status: RequestStatusType; tlID: string }>,\r\n    ) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.tlID);\r\n      // eslint-disable-next-line no-param-reassign\r\n      state[index].entityStatus = action.payload.status;\r\n    },\r\n    /* setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n             return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n         }, */\r\n    // clearTodoReduxAC(state, action: PayloadAction) {\r\n    //   // state = []\r\n    // },\r\n  },\r\n  extraReducers: builder => {\r\n      // eslint-disable-next-line consistent-return\r\n    builder.addCase(getTodolistsTC.fulfilled, (state, action) => {\r\n      if (action.payload)\r\n        return action.payload.todolists.map(tl => ({\r\n          ...tl,\r\n          filter: 'all',\r\n          entityStatus: 'idle',\r\n        }));\r\n    });\r\n    builder.addCase(removeTodolistsTC.fulfilled, (state, action) => {\r\n      const index = state.findIndex(tl => tl.id === action.payload?.id);\r\n      if (index > -one) {\r\n        state.splice(index, one);\r\n      }\r\n    });\r\n    builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n      if (action.payload)\r\n        state.unshift({\r\n          ...action.payload.todoList,\r\n          filter: 'all',\r\n          entityStatus: 'idle',\r\n        });\r\n    });\r\n    builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n      if (action.payload) {\r\n        const index = state.findIndex(tl => tl.id === action.payload?.todolistId);\r\n        // eslint-disable-next-line no-param-reassign\r\n        state[index].title = action.payload.title;\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nexport const { changeTDlEntityStatusAC, changeTDlFilterAC } = sliceTodolist.actions;\r\n\r\n// __thunks\r\n\r\n/* export const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTDLists()\r\n        .then(res => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTDlEntityStatusAC({status: 'loading', tlID: todolistId}))\r\n    todolistsAPI.deleteTDLists(todolistId)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTDlAC({id: todolistId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTDLists(title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTDlAC({todoList: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.updateTDLists(todolistId, title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTDlTitleAC({todolistId: todolistId, title: title}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n} */\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { setAppStatusAC } from './app-reducer';\r\nimport { addTodolistTC, getTodolistsTC, removeTodolistsTC } from './todolist-reducer';\r\n\r\nimport { ResponseTaskType, tasksAPI, TaskStatuses } from 'api/Todolists.api';\r\nimport { MainReducerType } from 'store/mainReducer';\r\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\r\nimport { one, zero } from 'Variables/Variables';\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<ResponseTaskType>;\r\n};\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const getTasksTC = createAsyncThunk(\r\n  'tasks/getTasks',\r\n    // eslint-disable-next-line consistent-return\r\n  async (todolistID: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }));\r\n    const res = await tasksAPI.getTasks(todolistID);\r\n    if (res.data.error === null)\r\n      try {\r\n        // thunkAPI.dispatch(setTasksAC({todolistID, tasks: res.data.items}))\r\n        thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n        return { todolistID, tasks: res.data.items };\r\n      } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n      }\r\n  },\r\n);\r\n\r\nexport const deleteTaskTC = createAsyncThunk(\r\n  'tasks/deleteTask',\r\n  (param: { todolistID: string; taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }));\r\n    return tasksAPI\r\n      .deleteTask(param.todolistID, param.taskId)\r\n        // eslint-disable-next-line consistent-return\r\n      .then(res => {\r\n        if (res.data.resultCode === zero) {\r\n          thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n          return { todolistId: param.todolistID, taskId: param.taskId };\r\n        }\r\n        handleServerAppError(res.data, thunkAPI.dispatch);\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n      });\r\n  },\r\n);\r\n\r\nexport const addTaskTC = createAsyncThunk(\r\n  'tasks/addTask',\r\n  (param: { todolistID: string; title: string }, { dispatch }) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    return tasksAPI\r\n      .createTask(param.todolistID, param.title)\r\n        // eslint-disable-next-line consistent-return\r\n      .then(res => {\r\n        if (res.data.resultCode === zero) {\r\n          dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n          return { task: res.data.data.item };\r\n        }\r\n        handleServerAppError(res.data, dispatch);\r\n        // return rejectWithValue(null)\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch);\r\n        // return rejectWithValue(null)\r\n      });\r\n  },\r\n);\r\n\r\n/* export const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { todolistID: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todolistID, param.title)\r\n            return res\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n}) */\r\n\r\nexport const changeTaskStatusTC = createAsyncThunk(\r\n  'tasks/changeTaskStatus',\r\n  async (\r\n    param: { todolistId: string; taskId: string; status: TaskStatuses },\r\n    { dispatch, getState },\r\n    // eslint-disable-next-line consistent-return\r\n  ) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n\r\n    /* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         }) */\r\n\r\n    const state = getState() as MainReducerType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\r\n\r\n    if (task) {\r\n      const res = await tasksAPI.updateTask(param.todolistId, param.taskId, {\r\n        title: task.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: param.status,\r\n      });\r\n      try {\r\n        if (res.data.resultCode === zero) {\r\n          dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n          return param;\r\n        }\r\n        handleServerAppError(res.data, dispatch);\r\n      } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch);\r\n      }\r\n    }\r\n  },\r\n);\r\n\r\nexport const changeTaskTitleTC = createAsyncThunk(\r\n  'tasks/changeTaskTitle',\r\n  async (\r\n    param: { todolistId: string; taskId: string; title: string },\r\n    { dispatch, getState },\r\n    // eslint-disable-next-line consistent-return\r\n  ) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n\r\n    /* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         }) */\r\n\r\n    const state = getState() as MainReducerType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\r\n\r\n    if (task) {\r\n      const res = await tasksAPI.updateTask(param.todolistId, param.taskId, {\r\n        title: param.title,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        status: task.status,\r\n      });\r\n      try {\r\n        if (res.data.resultCode === zero) {\r\n          dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n          return param;\r\n        }\r\n        handleServerAppError(res.data, dispatch);\r\n      } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch);\r\n      }\r\n    }\r\n  },\r\n);\r\n\r\nexport const sliceTasks = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    /* deleteTaskAC(state, action: PayloadAction<{ todolistId: string, taskId: string }>) { // moved to extra reducers\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        }, */\r\n    /* addTaskAC(state, action: PayloadAction<{ task: ResponseTaskType }>) { // moved to extra reducers\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        }, */\r\n    /* onChangeTaskTitleAC(state, action: PayloadAction<{ todolistId: string, taskId: string, title: string }>) {\r\n             const tasks = state[action.payload.todolistId]\r\n             const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n             if (index > -1) {\r\n                 tasks[index] = {...tasks[index], title: action.payload.title}\r\n             }\r\n         },\r\n         changeTaskStatusAC(state, action: PayloadAction<{ todolistID: string, taskID: string, status: TaskStatuses }>) {\r\n             const tasks = state[action.payload.todolistID]\r\n             const index = tasks.findIndex(task => task.id === action.payload.taskID)\r\n             if (index > -1) {\r\n                 tasks[index] = {...tasks[index], status: action.payload.status}\r\n             }\r\n         }, */\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      if (action.payload) state[action.payload.todoList.id] = [];\r\n    });\r\n    builder.addCase(removeTodolistsTC.fulfilled, (state, action) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      if (action.payload) delete state[action.payload.id];\r\n    });\r\n    builder.addCase(getTodolistsTC.fulfilled, (state, action) => {\r\n      if (action.payload)\r\n        action.payload.todolists.forEach((tl: any) => {\r\n          // eslint-disable-next-line no-param-reassign\r\n          state[tl.id] = [];\r\n        });\r\n    });\r\n    builder.addCase(getTasksTC.fulfilled, (state, action) => {\r\n      if (action.payload) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        state[action.payload.todolistID] = action.payload.tasks;\r\n      }\r\n    });\r\n    builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\r\n      if (action.payload) {\r\n        const tasks = state[action.payload.todolistId];\r\n        const index = tasks.findIndex(task => task.id === action.payload!.taskId);\r\n        if (index > -one) {\r\n          tasks.splice(index, one);\r\n        }\r\n      }\r\n    });\r\n    builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n      if (action.payload) {\r\n        state[action.payload.task.todoListId].unshift(action.payload.task);\r\n      }\r\n    });\r\n    builder.addCase(changeTaskStatusTC.fulfilled, (state, action) => {\r\n      if (action.payload) {\r\n        const tasks = state[action.payload.todolistId];\r\n        const index = tasks.findIndex(task => task.id === action.payload?.taskId);\r\n        if (index > -one) {\r\n          tasks[index] = { ...tasks[index], status: action.payload.status };\r\n        }\r\n      }\r\n    });\r\n    builder.addCase(changeTaskTitleTC.fulfilled, (state, action) => {\r\n      if (action.payload) {\r\n        const tasks = state[action.payload.todolistId];\r\n        const index = tasks.findIndex(task => task.id === action.payload?.taskId);\r\n        if (index > -one) {\r\n          tasks[index] = { ...tasks[index], title: action.payload.title };\r\n        }\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\n/* export const { //there are no ac already\r\n    onChangeTaskTitleAC,\r\n    changeTaskStatusAC,\r\n} = sliceTasks.actions */\r\n\r\n/* export const getTasksTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistID)\r\n        .then(res => {\r\n                if (res.data.error == null) {\r\n                    dispatch(setTasksAC({todolistID, tasks: res.data.items}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    // handleServerAppError(res, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n} */\r\n\r\n/* export const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(deleteTaskAC({todolistId, taskId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n} */\r\n\r\n/* export const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item\r\n                    const action = addTaskAC({task})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n} */\r\n\r\n/*\r\nexport const changeTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        /!* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         })*!/\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(changeTaskStatusAC({todolistID: todolistId, taskID: taskId, status}))\r\n                            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n*/\r\n\r\n/*\r\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(onChangeTaskTitleAC({todolistId, taskId, title}))\r\n                            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    } */\r\n","import { sliceApp } from '../app-reducer';\r\nimport { sliceAuth } from '../authReducer';\r\nimport { sliceTasks } from '../tasks.reducer';\r\nimport { sliceTodolist } from '../todolist-reducer';\r\n\r\nexport const todolistsReducer = sliceTodolist.reducer;\r\n\r\nexport const authReducer = sliceAuth.reducer;\r\n\r\nexport const appReducer = sliceApp.reducer;\r\n\r\nexport const tasksReducer = sliceTasks.reducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport {\r\n  appReducer,\r\n  authReducer,\r\n  tasksReducer,\r\n  todolistsReducer,\r\n} from '../Reducers/reducer/all-reducer';\r\n\r\nexport type MainReducerType = ReturnType<typeof mainReducer>;\r\nexport const mainReducer = combineReducers({\r\n  app: appReducer,\r\n  todoLists: todolistsReducer,\r\n  login: authReducer,\r\n  tasks: tasksReducer,\r\n});\r\n","// eslint-disable-next-line import/no-import-module-exports\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport { useDispatch } from 'react-redux';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport thunk from 'redux-thunk';\r\n\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport { mainReducer } from './mainReducer';\r\n\r\n// export let store = createStore(mainReducer, applyMiddleware(thunk)) //redux approach\r\n\r\nexport const store = configureStore({\r\n  // redux toolkit approach\r\n  reducer: mainReducer,\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n});\r\n\r\ntype AppDispatchType = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./mainReducer', () => {\r\n    store.replaceReducer(mainReducer);\r\n  });\r\n}\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  Grid,\r\n  TextField,\r\n} from '@mui/material';\r\nimport { FormikHelpers, useFormik } from 'formik';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { authTC } from 'Reducers/authReducer';\r\nimport { MainReducerType } from 'store/mainReducer';\r\nimport { useAppDispatch } from 'store/store';\r\nimport { zero } from 'Variables';\r\n\r\ntype FormValuesTypes = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\n\r\nexport const Login = (): ReactElement => {\r\n  const dispatch = useAppDispatch();\r\n  const isLoggedIn = useSelector<MainReducerType, boolean>(\r\n    state => state.login.isLoggedIn,\r\n  );\r\n\r\n  const formik = useFormik({\r\n    // eslint-disable-next-line consistent-return\r\n    validate: values => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'insert correct email',\r\n        };\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          email: 'password is required',\r\n        };\r\n      }\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesTypes>) => {\r\n      const action = await dispatch(authTC(values));\r\n      if (authTC.rejected.match(action)) {\r\n        if (action.payload?.fieldsErrors?.length) {\r\n          const error = action.payload.fieldsErrors[zero];\r\n          formikHelpers.setFieldError(error.field, error.error);\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Grid item m={4}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in, please, get registration{' '}\r\n                <a\r\n                  href=\"https://social-network.samuraijs.com/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use these test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"email\"\r\n                margin=\"normal\"\r\n                /* eslint-disable-next-line react/jsx-props-no-spreading */\r\n                {...formik.getFieldProps('email')}\r\n              />\r\n              {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n              <TextField\r\n                label=\"password\"\r\n                margin=\"normal\"\r\n                type=\"password\"\r\n                /* eslint-disable-next-line react/jsx-props-no-spreading */\r\n                {...formik.getFieldProps('password')}\r\n              />\r\n              {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n              <FormControlLabel\r\n                control={\r\n                  // eslint-disable-next-line react/jsx-props-no-spreading\r\n                  <Checkbox {...formik.getFieldProps('rememberMe')} color=\"secondary\" />\r\n                }\r\n                label=\"Remember me\"\r\n                checked={formik.values.rememberMe}\r\n              />\r\n              <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Checkbox, IconButton, ThemeProvider} from '@mui/material';\r\n\r\nimport {theme} from \"../app/App\";\r\n\r\nimport s from './Tasks.module.css';\r\n\r\nimport { ResponseTaskType, TaskStatuses } from 'api/Todolists.api';\r\nimport { EditableSpan } from 'components';\r\nimport { TodolistDomainType } from 'Reducers/todolist-reducer';\r\n\r\ntype TaskPropsType = {\r\n  changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void;\r\n  onChangeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void;\r\n  deleteTask: (todolistId: string, taskId: string) => void;\r\n  task: ResponseTaskType;\r\n  todolistId: string;\r\n  todolist: TodolistDomainType;\r\n};\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const onChangeCheckedHandler = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      props.changeTaskStatus(\r\n        props.todolistId,\r\n        props.task.id,\r\n        e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New,\r\n      );\r\n    },\r\n    [props.changeTaskStatus, props.task.id, props.todolistId],\r\n  );\r\n\r\n  const onChangeTitleHandler = useCallback(\r\n    (newTitle: string) => {\r\n      props.onChangeTaskTitle(props.todolistId, props.task.id, newTitle);\r\n    },\r\n    [props.todolistId, props.task.id, props.onChangeTaskTitle],\r\n  );\r\n\r\n  return (\r\n    <li\r\n      key={props.task.id}\r\n      className={props.task.status === TaskStatuses.Completed ? s.completedTask : ''}\r\n      style={{ maxWidth: '250px', display: 'flex', alignItems: 'center', flexGrow: 1 }}\r\n    >\r\n      <ThemeProvider theme={theme}>\r\n      <Checkbox\r\n        onChange={onChangeCheckedHandler}\r\n        checked={props.task.status === TaskStatuses.Completed}\r\n        style={{}}\r\n      />\r\n      </ThemeProvider>\r\n      <EditableSpan\r\n        title={props.task.title}\r\n        onChange={onChangeTitleHandler}\r\n        todolist={props.todolist}\r\n      />\r\n      <IconButton\r\n        aria-label=\"delete\"\r\n        onClick={() => props.deleteTask(props.todolistId, props.task.id)}\r\n        disabled={props.todolist.entityStatus === 'loading'}\r\n        style={{ marginRight: 0 }}\r\n      >\r\n        <Delete />\r\n      </IconButton>\r\n    </li>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from 'react';\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Button, IconButton, ThemeProvider} from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { AddItemForm } from '../../addItemForm';\r\nimport { EditableSpan } from '../../editableSpan';\r\nimport { Task } from '../../task';\r\n\r\nimport { ResponseTaskType, TaskStatuses } from 'api/Todolists.api';\r\nimport { theme } from 'components/app/App';\r\nimport { getTasksTC } from 'Reducers/tasks.reducer';\r\nimport { FilterType, TodolistDomainType } from 'Reducers/todolist-reducer';\r\n\r\ntype TodolistPropsType = {\r\n  id: string;\r\n  title: string;\r\n  tasks: Array<ResponseTaskType>;\r\n  changeFilter: (filter: FilterType, todolistId: string) => void;\r\n  addTask: (todolistId: string, title: string) => void;\r\n  changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void;\r\n  onChangeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void;\r\n  deleteTask: (todolistId: string, taskId: string) => void;\r\n  removeTDFunc: (todolistId: string) => void;\r\n  changeTDListTitleAPP: (todolistId: string, newTitle: string) => void;\r\n  todolist: TodolistDomainType;\r\n  // eslint-disable-next-line react/require-default-props\r\n  demo?: boolean;\r\n};\r\n\r\nexport const TodoList = React.memo((props: TodolistPropsType) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (props.demo) {\r\n      return;\r\n    }\r\n    if (!props.tasks.length) {\r\n      dispatch(getTasksTC(props.todolist.id));\r\n    }\r\n  }, []);\r\n\r\n  const allFilter = useCallback(() => {\r\n    props.changeFilter('all', props.todolist.id);\r\n  }, [props.changeFilter, props.todolist.id]);\r\n  const activeFilter = useCallback(() => {\r\n    props.changeFilter('active', props.todolist.id);\r\n  }, [props.changeFilter, props.todolist.id]);\r\n  const completedFilter = useCallback(() => {\r\n    props.changeFilter('completed', props.todolist.id);\r\n  }, [props.changeFilter, props.todolist.id]);\r\n\r\n  const removeTDButton = (): void => {\r\n    props.removeTDFunc(props.todolist.id);\r\n  };\r\n\r\n  const ChangeTDListTitle = useCallback(\r\n    (newTitle: string) => {\r\n      props.changeTDListTitleAPP(props.todolist.id, newTitle);\r\n    },\r\n    [props.changeTDListTitleAPP, props.todolist.id],\r\n  );\r\n\r\n  const addTaskBridge = useCallback(\r\n    (title: string) => {\r\n      props.addTask(props.todolist.id, title);\r\n    },\r\n    [props.addTask, props.todolist.id],\r\n  );\r\n\r\n  let tasksForTDList = props.tasks;\r\n  if (props.todolist.filter === 'active') {\r\n    tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === 'completed') {\r\n    tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>\r\n        <EditableSpan\r\n          title={props.todolist.title}\r\n          onChange={ChangeTDListTitle}\r\n          todolist={props.todolist}\r\n        />\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          onClick={removeTDButton}\r\n          disabled={props.todolist.entityStatus === 'loading'}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm\r\n        callback={addTaskBridge}\r\n        disabled={props.todolist.entityStatus === 'loading'}\r\n      />\r\n\r\n      <div>\r\n        <ul style={{ listStyle: 'none', paddingLeft: 0 }}>\r\n          {tasksForTDList.map(t => (\r\n            <Task\r\n              key={t.id}\r\n              task={t}\r\n              deleteTask={props.deleteTask}\r\n              changeTaskStatus={props.changeTaskStatus}\r\n              onChangeTaskTitle={props.onChangeTaskTitle}\r\n              todolistId={props.todolist.id}\r\n              todolist={props.todolist}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <ThemeProvider theme={theme}>\r\n        <Button\r\n          color={props.todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n          variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n          onClick={allFilter}\r\n          size=\"small\"\r\n        >\r\n          All\r\n        </Button>\r\n        </ThemeProvider>\r\n        <ThemeProvider theme={theme}>\r\n        <Button\r\n          color={props.todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n          variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n          onClick={activeFilter}\r\n          size=\"small\"\r\n        >\r\n          Active\r\n        </Button>\r\n        </ThemeProvider>\r\n          <ThemeProvider theme={theme}>\r\n        <Button\r\n          color={props.todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n          variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n          onClick={completedFilter}\r\n          size=\"small\"\r\n        >\r\n          Completed\r\n        </Button>\r\n          </ThemeProvider>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from 'react';\r\n\r\nimport { Grid, Paper } from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { TaskStatuses } from '../../api';\r\nimport { MainReducerType } from '../../store';\r\nimport { AddItemForm } from '../addItemForm';\r\nimport { TodoListsType } from '../app/App';\r\n\r\nimport { TodoList } from './todolist/todolist';\r\n\r\nimport {\r\n  addTaskTC,\r\n  changeTaskStatusTC,\r\n  changeTaskTitleTC,\r\n  deleteTaskTC,\r\n  TasksStateType,\r\n} from 'Reducers/tasks.reducer';\r\nimport {\r\n  addTodolistTC,\r\n  changeTDlFilterAC,\r\n  changeTodolistTitleTC,\r\n  FilterType,\r\n  getTodolistsTC,\r\n  removeTodolistsTC,\r\n} from 'Reducers/todolist-reducer';\r\n\r\nexport const TodoLists = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n  const todolistsFromState = useSelector<MainReducerType, TodoListsType>(\r\n    state => state.todoLists,\r\n  );\r\n  const tasksFromState = useSelector<MainReducerType, TasksStateType>(\r\n    state => state.tasks,\r\n  );\r\n  const isLoggedIn = useSelector<MainReducerType, boolean>(\r\n    state => state.login.isLoggedIn,\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!todolistsFromState.length) {\r\n      dispatch(getTodolistsTC());\r\n    }\r\n  }, []);\r\n\r\n  const addTask = useCallback(\r\n    (todolistID: string, title: string) => {\r\n      dispatch(addTaskTC({ todolistID, title }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const changeTaskStatus = useCallback(\r\n    (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n      dispatch(changeTaskStatusTC({ todolistId, taskId, status }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const deleteTask = useCallback(\r\n    (todolistID: string, taskId: string) => {\r\n      dispatch(deleteTaskTC({ todolistID, taskId }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const onChangeTaskTitle = useCallback(\r\n    (todolistId: string, taskId: string, title: string) => {\r\n      dispatch(changeTaskTitleTC({ todolistId, taskId, title }));\r\n    },\r\n    [dispatch],\r\n  );\r\n  const changeFilter = useCallback(\r\n    (filter: FilterType, todolistId: string) => {\r\n      dispatch(changeTDlFilterAC({ filter, todolistId }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const removeTDFunc = useCallback(\r\n    (todolistId: string) => {\r\n      dispatch(removeTodolistsTC({ todolistId }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const addTDList = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistTC({ title }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const changeTDListTitleAPP = useCallback(\r\n    (todolistId: string, title: string) => {\r\n      dispatch(changeTodolistTitleTC({ todolistId, title }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: '20px' }}>\r\n        <AddItemForm callback={addTDList} label=\"new todolist title\" />\r\n      </Grid>\r\n      <Grid container spacing={4}>\r\n        {todolistsFromState.map(tl => {\r\n          const filteredTasks = tasksFromState[tl.id];\r\n\r\n          return (\r\n            <Grid item key={tl.id}>\r\n              <Paper style={{ padding: '10px' }}>\r\n                <TodoList\r\n                  key={tl.id}\r\n                  id={tl.id}\r\n                  title={tl.title}\r\n                  tasks={filteredTasks}\r\n                  deleteTask={deleteTask}\r\n                  changeFilter={changeFilter}\r\n                  addTask={addTask}\r\n                  changeTaskStatus={changeTaskStatus}\r\n                  removeTDFunc={removeTDFunc}\r\n                  onChangeTaskTitle={onChangeTaskTitle}\r\n                  changeTDListTitleAPP={changeTDListTitleAPP}\r\n                  todolist={tl}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n});\r\n","import React, { ReactElement, useCallback, useEffect } from 'react';\r\n\r\nimport '../../App.css';\r\nimport { Menu } from '@mui/icons-material';\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container, createTheme,\r\n  IconButton,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { Navigate } from 'react-router';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport { ErrorSnackBar, Login, TodoLists } from 'components';\r\nimport { initializeAppTC, RequestStatusType } from 'Reducers/app-reducer';\r\nimport { logOutTC } from 'Reducers/authReducer';\r\nimport { TodolistDomainType } from 'Reducers/todolist-reducer';\r\nimport { MainReducerType } from 'store/mainReducer';\r\nimport { Nullable } from 'types';\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      // light: will be calculated from palette.primary.main,\r\n      main: '#5ebcd1',\r\n      // dark: will be calculated from palette.primary.main,\r\n      // contrastText: will be calculated to contrast with palette.primary.main\r\n    },\r\n    secondary: {\r\n      light: '#0066ff',\r\n      main: '#ac66cc',\r\n      // dark: will be calculated from palette.secondary.main,\r\n      contrastText: '#ffcc00',\r\n    },\r\n    // Used by `getContrastText()` to maximize the contrast between\r\n    // the background and the text.\r\n    contrastThreshold: 3,\r\n    // Used by the functions below to shift a color's luminance by approximately\r\n    // two indexes within its tonal palette.\r\n    // E.g., shift from Red 500 to Red 300 or Red 700.\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n\r\nexport type TodoListsType = Array<TodolistDomainType>;\r\nconst App = (): Nullable<ReactElement> => {\r\n  // check App return type\r\n  const dispatch = useDispatch();\r\n  const isInitialized = useSelector<MainReducerType, boolean>(\r\n    state => state.app.isAppInitialized,\r\n  );\r\n  const isLoggedIn = useSelector<MainReducerType, boolean>(\r\n    state => state.login.isLoggedIn,\r\n  );\r\n  const status = useSelector<MainReducerType, RequestStatusType>(\r\n    state => state.app.status,\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!isInitialized) {\r\n      dispatch(initializeAppTC());\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const logOutHandler = useCallback(() => {\r\n    // dispatch(clearReduxAC()) //fix tasks fetching\r\n    dispatch(logOutTC());\r\n  }, [dispatch]);\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '30%' }}>\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        flexGrow: 1,\r\n        background: '#E0E0E0',\r\n        minHeight: '100vh',\r\n        paddingBottom: '20px',\r\n      }}\r\n    >\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Toolbar>\r\n          <ErrorSnackBar />\r\n          <IconButton\r\n            edge=\"start\"\r\n            style={{ marginRight: 2 }}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }} align=\"center\">\r\n            ToDoList\r\n          </Typography>\r\n          {isLoggedIn && (\r\n            <Button\r\n              color=\"inherit\"\r\n              onClick={() => {\r\n                logOutHandler();\r\n              }}\r\n            >\r\n              Log out\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/TodoList-v2\" element={<Navigate to=\"login\" />} />\r\n          <Route path=\"/login\" element={<Login />} />\r\n          <Route path=\"/\" element={<TodoLists />} />\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// eslint-disable-next-line import/no-import-module-exports\r\nimport React from 'react';\r\n\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport ReactDOM from 'react-dom';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport './index.css';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport { Provider } from 'react-redux';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport App from './components/app/App';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport reportWebVitals from './reportWebVitals';\r\n// eslint-disable-next-line import/no-import-module-exports\r\nimport { store } from './store/store';\r\n\r\nexport const reRenderEntireApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n          <App />\r\n        </HashRouter>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n  );\r\n};\r\n\r\nreRenderEntireApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./components/app/App', () => {\r\n    reRenderEntireApp();\r\n  });\r\n  /* module.hot.accept('./store/store', () => {\r\n        reRenderEntireApp()\r\n    }) */\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskName\":\"Tasks_taskName__2PRlL\",\"completedTask\":\"Tasks_completedTask__8p0u7\"};"],"sourceRoot":""}