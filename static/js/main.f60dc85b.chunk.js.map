{"version":3,"sources":["api/Todolists.api.ts","components/addItemForm/AddItemForm.tsx","utils/error-utils.ts","Reducers/authReducer.ts","Reducers/app-reducer.ts","Reducers/todolist-reducer.ts","Reducers/tasks.reducer.ts","components/editableSpan/EditableSpan.tsx","components/task/Task.tsx","components/todoList/todolist/todolist.tsx","components/todoList/TodoLists.tsx","components/errorSnackBar/ErrorSnackBar.tsx","Reducers/reducer/all-reducer.ts","store/mainReducer.tsx","store/store.tsx","components/login/login.tsx","components/app/App.tsx","reportWebVitals.ts","index.tsx","components/task/Tasks.module.css"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","callback","disabled","label","useState","title","setTitle","error","setError","style","height","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","trim","helperText","background","borderRadius","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","tasksAPI","taskId","model","description","deadline","status","priority","startDate","authAPI","authParams","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","authTC","createAsyncThunk","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","errors","fieldsErrors","undefined","logOutTC","sliceAuth","createSlice","name","initialState","reducers","isLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","initializeAppTC","sliceApp","isAppInitialized","setAppIsInitializedStatusAC","getTodolistsTC","param","todolists","removeTodolistsTC","changeTDlEntityStatusAC","tlID","id","addTodolistTC","todoList","item","changeTodolistTitleTC","sliceTodolist","changeTDlFilterAC","index","findIndex","tl","filter","entityStatus","clearTodoReduxAC","map","splice","unshift","getTasksTC","todolistID","tasks","items","deleteTaskTC","then","catch","addTaskTC","task","changeTaskStatusTC","getState","find","t","changeTaskTitleTC","sliceTasks","forEach","todoListId","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","todolist","className","s","taskName","onDoubleClick","Task","onChangeCheckedHandler","useCallback","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","newTitle","onChangeTaskTitle","completedTask","maxWidth","display","alignItems","flexGrow","Checkbox","deleteTask","marginRight","Delete","TodoList","useDispatch","useEffect","demo","allFilter","changeFilter","activeFilter","completedFilter","ChangeTDListTitle","changeTDListTitleAPP","addTaskBridge","addTask","tasksForTDList","removeTDFunc","listStyle","paddingLeft","Button","TodoLists","todolistsFromState","useSelector","todoLists","tasksFromState","login","addTDList","Grid","container","padding","spacing","filteredTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackBar","app","isOpen","Snackbar","open","autoHideDuration","onClose","event","reason","severity","todolistsReducer","reducer","authReducer","appReducer","tasksReducer","mainReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","match","setFieldError","field","justifyContent","m","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","isInitialized","logOutHandler","minHeight","paddingBottom","AppBar","position","Toolbar","edge","Menu","Typography","align","LinearProgress","Container","fixed","path","element","marginTop","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reRenderEntireApp","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f60dc85b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'ae005362-3cd1-4901-a9c5-790f2698eec1'},\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\n/*type CreateTDListResType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n}\r\n\r\ntype UpdateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}\r\n\r\ntype DeleteTodolistResponseType = { ///all types in generic one\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: {}\r\n}*/\r\n\r\nexport type FieldErrorType = { error: string, field: string };\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    //fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type ResponseTasksType = {\r\n    items: Array<ResponseTaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTDLists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\",)\r\n    },\r\n    createTDLists(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTDLists(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTDLists(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: ResponseTaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelType) {\r\n        return instance.put<ResponseType<{ data: ResponseTaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            {\r\n                title: model.title,\r\n                description: model.description,\r\n                deadline: model.deadline,\r\n                status: model.status,\r\n                priority: model.priority,\r\n                startDate: model.startDate\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(authParams: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, authParams)\r\n    },\r\n    authMe() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('/auth/login')\r\n    }\r\n}","import TextField from \"@mui/material/TextField\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    callback: (title: string) => void\r\n    disabled?: boolean\r\n    label?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({\r\n                                           callback,\r\n                                           disabled = false,\r\n                                           label = 'new task title'\r\n                                       }: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const onChangeNewTaskTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError('')\r\n        }\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        }\r\n        if (e.key === 'Enter' && title.trim() === '') {\r\n            setError('Insert Title')\r\n        }\r\n    }\r\n\r\n    const addTaskButton = () => {\r\n        if (title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Insert new title')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            <TextField\r\n                disabled={disabled}\r\n                size={'small'}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeNewTaskTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={label ? label : 'Title'}\r\n                helperText={error}\r\n                style={{background: '#FFFFFF', borderRadius: 5}}/>\r\n            <IconButton color={'secondary'} size={'small'} onClick={addTaskButton} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {ResponseType} from \"../api/Todolists.api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../Reducers/app-reducer\";\r\n\r\nexport const handleServerAppError = <T = {}>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'some error has occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n\r\n}\r\n\r\nexport const handleServerNetworkError = <T = {}>(error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}","import {authAPI, FieldErrorType, LoginParamsType} from \"../api/Todolists.api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nexport const authTC = createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>(\r\n    'auth/login',\r\n    async (authParams, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.login(authParams)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {isLoggedIn: true}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({\r\n                    errors: res.data.messages,\r\n                    fieldsErrors: res.data.fieldsErrors\r\n                })\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({\r\n                errors: [error.message],\r\n                fieldsErrors: undefined\r\n            })\r\n        }\r\n    })\r\n\r\nexport const logOutTC = createAsyncThunk(\r\n    'auth/logOut',\r\n    async (authParams, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.logOut()\r\n            if (res.data.resultCode === 0) {\r\n                //thunkAPI.dispatch(clearTodoReduxAC())\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue('')\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue('')\r\n        }\r\n    })\r\n\r\n\r\nexport const sliceAuth = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        isLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(authTC.fulfilled, (state) => {\r\n            /* if (action.payload) {\r\n                 state.isLoggedIn = action.payload.isLoggedIn\r\n             }*/\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logOutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {isLoggedInAC} = sliceAuth.actions\r\n\r\n//__thunks\r\n\r\n/*export const authTC = (authParams: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(authParams)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(isLoggedInAC({value: true}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n/*\r\nexport const logOutTC_ = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(clearTodoReduxAC())\r\n                    dispatch(isLoggedInAC({value: false}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n*/\r\n\r\n\r\n","import {authAPI} from \"../api/Todolists.api\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {isLoggedInAC} from \"./authReducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isAppInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk(\r\n    'app/initializeApp',\r\n    async (authParams, {dispatch}) => {\r\n        try {\r\n            const res = await authAPI.authMe()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(isLoggedInAC({value: true}))\r\n            } else {\r\n                dispatch(isLoggedInAC({value: false}))\r\n            }\r\n            //dispatch(setAppIsInitializedStatusAC({isAppInitialized: true})) // эта логика уже в соотв. билдере\r\n        } catch(error: any) {\r\n                handleServerNetworkError(error, dispatch)\r\n            }\r\n    })\r\n\r\n\r\nexport const sliceApp = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isAppInitialized: false,\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppIsInitializedStatusAC(state, action: PayloadAction<{ isAppInitialized: boolean }>) {\r\n            state.isAppInitialized = action.payload.isAppInitialized\r\n        }\r\n    },\r\n    extraReducers:builder =>  {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isAppInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n} = sliceApp.actions\r\n\r\n\r\n//__thunk\r\n\r\n/*\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.authMe()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(isLoggedInAC({value: true}))\r\n            } else {\r\n                dispatch(isLoggedInAC({value: false}))\r\n            }\r\n            dispatch(setAppIsInitializedStatusAC({isAppInitialized: true}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n","import {todolistsAPI, TodolistType} from \"../api/Todolists.api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const getTodolistsTC = createAsyncThunk('todolists/getTodolists', async (param, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTDLists()\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n})\r\n\r\nexport const removeTodolistsTC = createAsyncThunk('todolists/removeTodolists', async (param: { todolistId: string }, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTDlEntityStatusAC({status: 'loading', tlID: param.todolistId}))\r\n    const res = await todolistsAPI.deleteTDLists(param.todolistId)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (param: { title: string }, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTDLists(param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todoList: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { todolistId: string, title: string }, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.updateTDLists(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolistId: param.todolistId, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n})\r\n\r\nexport const sliceTodolist = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        /*    removeTDlAC(state, action: PayloadAction<{ id: string }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            },*/\r\n        /*  addTDlAC(state, action: PayloadAction<{ todoList: TodolistType }>) {\r\n              state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n          },*/\r\n        /*addTodolist(state, action: PayloadAction<{ todoList: TodolistType }>) {\r\n            state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        },*/\r\n        /*changeTDlTitleAC(state, action: PayloadAction<{ todolistId: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },*/\r\n        changeTDlFilterAC(state, action: PayloadAction<{ filter: FilterType, todolistId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTDlEntityStatusAC(state, action: PayloadAction<{ status: RequestStatusType, tlID: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.tlID)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        /* setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n             return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n         },*/\r\n        clearTodoReduxAC(state, action: PayloadAction) {\r\n            // state = []\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getTodolistsTC.fulfilled, (state, action) => {\r\n            if (action.payload)\r\n                return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistsTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload?.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload)\r\n                state.unshift({...action.payload.todoList, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const index = state.findIndex(tl => tl.id === action.payload?.todolistId)\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    changeTDlEntityStatusAC,\r\n    changeTDlFilterAC\r\n} = sliceTodolist.actions\r\n\r\n\r\n//__thunks\r\n\r\n/*export const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTDLists()\r\n        .then(res => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTDlEntityStatusAC({status: 'loading', tlID: todolistId}))\r\n    todolistsAPI.deleteTDLists(todolistId)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTDlAC({id: todolistId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTDLists(title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTDlAC({todoList: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.updateTDLists(todolistId, title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTDlTitleAC({todolistId: todolistId, title: title}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ResponseTaskType, tasksAPI, TaskStatuses} from \"../api/Todolists.api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {addTodolistTC, getTodolistsTC, removeTodolistsTC} from \"./todolist-reducer\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {MainReducerType} from \"../store/mainReducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const getTasksTC = createAsyncThunk('tasks/getTasks', async (todolistID: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await tasksAPI.getTasks(todolistID)\r\n    if (res.data.error === null)\r\n        try {\r\n            //thunkAPI.dispatch(setTasksAC({todolistID, tasks: res.data.items}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolistID, tasks: res.data.items}\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n        }\r\n})\r\n\r\n\r\nexport const deleteTaskTC = createAsyncThunk('tasks/deleteTask', (param: { todolistID: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    return tasksAPI.deleteTask(param.todolistID, param.taskId)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    return {todolistId: param.todolistID, taskId: param.taskId}\r\n                } else {\r\n                    handleServerAppError(res.data, thunkAPI.dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n        })\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', (param: { todolistID: string, title: string }, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    return tasksAPI.createTask(param.todolistID, param.title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {task: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                //return rejectWithValue(null)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            //return rejectWithValue(null)\r\n        })\r\n})\r\n\r\n/*export const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { todolistID: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todolistID, param.title)\r\n            return res\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})*/\r\n\r\nexport const changeTaskStatusTC = createAsyncThunk('tasks/changeTaskStatus',\r\n    async (param: { todolistId: string, taskId: string, status: TaskStatuses }, {dispatch, getState}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        /* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         })*/\r\n\r\n        const state = getState() as MainReducerType\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n\r\n        if (task) {\r\n            const res = await tasksAPI.updateTask(param.todolistId, param.taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: param.status\r\n            })\r\n            try {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    return param\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            } catch (error: any) {\r\n                handleServerNetworkError(error, dispatch)\r\n            }\r\n        }\r\n    })\r\n\r\nexport const changeTaskTitleTC = createAsyncThunk('tasks/changeTaskTitle',\r\n    async (param: { todolistId: string, taskId: string, title: string }, {dispatch, getState}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        /* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         })*/\r\n\r\n        const state = getState() as MainReducerType\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n\r\n        if (task) {\r\n            const res = await tasksAPI.updateTask(param.todolistId, param.taskId, {\r\n                title: param.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n            try {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    return param\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            } catch (error: any) {\r\n                handleServerNetworkError(error, dispatch)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\nexport const sliceTasks = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        /*deleteTaskAC(state, action: PayloadAction<{ todolistId: string, taskId: string }>) { // moved to extra reducers\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },*/\r\n        /*addTaskAC(state, action: PayloadAction<{ task: ResponseTaskType }>) { // moved to extra reducers\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },*/\r\n        /* onChangeTaskTitleAC(state, action: PayloadAction<{ todolistId: string, taskId: string, title: string }>) {\r\n             const tasks = state[action.payload.todolistId]\r\n             const index = tasks.findIndex(task => task.id === action.payload.taskId)\r\n             if (index > -1) {\r\n                 tasks[index] = {...tasks[index], title: action.payload.title}\r\n             }\r\n         },\r\n         changeTaskStatusAC(state, action: PayloadAction<{ todolistID: string, taskID: string, status: TaskStatuses }>) {\r\n             const tasks = state[action.payload.todolistID]\r\n             const index = tasks.findIndex(task => task.id === action.payload.taskID)\r\n             if (index > -1) {\r\n                 tasks[index] = {...tasks[index], status: action.payload.status}\r\n             }\r\n         },*/\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload)\r\n                state[action.payload.todoList.id] = []\r\n        })\r\n        builder.addCase(removeTodolistsTC.fulfilled, (state, action) => {\r\n            if (action.payload)\r\n                delete state[action.payload.id]\r\n        })\r\n        builder.addCase(getTodolistsTC.fulfilled, (state, action) => {\r\n            if (action.payload)\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n        })\r\n        builder.addCase(getTasksTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todolistID] = action.payload.tasks\r\n            }\r\n        })\r\n        builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload!.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task)\r\n            }\r\n        })\r\n        builder.addCase(changeTaskStatusTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload?.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], status: action.payload.status}\r\n                }\r\n            }\r\n\r\n        })\r\n        builder.addCase(changeTaskTitleTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(task => task.id === action.payload?.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], title: action.payload.title}\r\n                }\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n\r\n/*export const { //there are no ac already\r\n    onChangeTaskTitleAC,\r\n    changeTaskStatusAC,\r\n} = sliceTasks.actions*/\r\n\r\n\r\n/*export const getTasksTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistID)\r\n        .then(res => {\r\n                if (res.data.error == null) {\r\n                    dispatch(setTasksAC({todolistID, tasks: res.data.items}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    // handleServerAppError(res, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n/*export const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(deleteTaskAC({todolistId, taskId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n/*export const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item\r\n                    const action = addTaskAC({task})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n\r\n/*\r\nexport const changeTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        /!* const allTasksFromState = getState().tasks; //подробная запись\r\n         const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n         const task = tasksForCurrentTodolist.find(t => {\r\n             return t.id === taskId\r\n         })*!/\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(changeTaskStatusAC({todolistID: todolistId, taskID: taskId, status}))\r\n                            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n*/\r\n\r\n/*\r\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => MainReducerType) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n                .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(onChangeTaskTitleAC({todolistId, taskId, title}))\r\n                            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch)\r\n                        }\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }*/\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist-reducer\";\r\nimport s from '../task/Tasks.module.css'\r\n\r\nexport type editableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: editableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const setViewNode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n        return props.title\r\n    }\r\n\r\n    return (editMode\r\n            ? <input onChange={onChangeTitleHandler} value={title} autoFocus onBlur={setViewNode}\r\n                     onKeyPress={onKeyPressHandler} disabled={props.todolist.entityStatus === 'loading'}\r\n                     className={s.taskName}/>\r\n            : <span onDoubleClick={activateEditMode} className={s.taskName}>{props.title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/Todolists.api\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist-reducer\";\r\nimport s from './Tasks.module.css'\r\n\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    onChangeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    task: ResponseTaskType\r\n    todolistId: string\r\n    todolist: TodolistDomainType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onChangeCheckedHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistId, props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        props.onChangeTaskTitle(props.todolistId, props.task.id, newTitle)\r\n    }, [props.todolistId, props.task.id, props.onChangeTaskTitle])\r\n\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.completedTask : ''}\r\n               style={{maxWidth: '250px', display: 'flex', alignItems: \"center\", flexGrow: 1}}>\r\n        <Checkbox onChange={onChangeCheckedHandler} checked={props.task.status === TaskStatuses.Completed} style={{}}/>\r\n        <EditableSpan title={props.task.title}\r\n                      onChange={onChangeTitleHandler}\r\n                      todolist={props.todolist}\r\n        />\r\n        <IconButton aria-label=\"delete\" onClick={() => props.deleteTask(props.todolistId, props.task.id)}\r\n                    disabled={props.todolist.entityStatus === 'loading'} style={{marginRight: 0}}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n})","import {Button, IconButton} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../addItemForm/AddItemForm\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {getTasksTC} from \"../../../Reducers/tasks.reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/Todolists.api\";\r\nimport {EditableSpan} from \"../../editableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Task} from \"../../task/Task\";\r\nimport {FilterType, TodolistDomainType} from \"../../../Reducers/todolist-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<ResponseTaskType>\r\n    changeFilter: (filter: FilterType, todolistId: string) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses,) => void\r\n    onChangeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    removeTDFunc: (todolistId: string) => void\r\n    changeTDListTitleAPP: (todolistId: string, newTitle: string) => void\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (props.demo) {\r\n            return\r\n        }\r\n        if(!props.tasks.length) {\r\n            dispatch(getTasksTC(props.todolist.id))\r\n        }\r\n    }, [])\r\n\r\n\r\n    const allFilter = useCallback(() => {\r\n        props.changeFilter('all', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const activeFilter = useCallback(() => {\r\n        props.changeFilter('active', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const completedFilter = useCallback(() => {\r\n        props.changeFilter('completed', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id])\r\n\r\n    const removeTDButton = () => {\r\n        props.removeTDFunc(props.todolist.id)\r\n    }\r\n\r\n    const ChangeTDListTitle = useCallback((newTitle: string) => {\r\n        props.changeTDListTitleAPP(props.todolist.id, newTitle)\r\n    }, [props.changeTDListTitleAPP, props.todolist.id])\r\n\r\n    const addTaskBridge = useCallback((title: string) => {\r\n        props.addTask(props.todolist.id, title)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n\r\n    let tasksForTDList = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTDList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={ChangeTDListTitle} todolist={props.todolist}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTDButton}\r\n                            disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={addTaskBridge} disabled={props.todolist.entityStatus === 'loading'}/>\r\n\r\n            <div>\r\n                <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                    {\r\n                        tasksForTDList.map(t => <Task key={t.id}\r\n                                                      task={t}\r\n                                                      deleteTask={props.deleteTask}\r\n                                                      changeTaskStatus={props.changeTaskStatus}\r\n                                                      onChangeTaskTitle={props.onChangeTaskTitle}\r\n                                                      todolistId={props.todolist.id}\r\n                                                      todolist={props.todolist}\r\n                        />)\r\n                    }\r\n                </ul>\r\n                <Button color={props.todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={allFilter}\r\n                        size={\"small\"}>All</Button>\r\n                <Button color={props.todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={activeFilter}\r\n                        size={\"small\"}>Active</Button>\r\n                <Button color={props.todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={completedFilter}\r\n                        size={\"small\"}>Completed</Button>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {\r\n    addTodolistTC, changeTDlFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterType,\r\n    getTodolistsTC,\r\n    removeTodolistsTC\r\n} from \"../../Reducers/todolist-reducer\";\r\nimport {TaskStatuses} from \"../../api/Todolists.api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskStatusTC,\r\n    changeTaskTitleTC,\r\n    deleteTaskTC,\r\n    TasksStateType\r\n} from \"../../Reducers/tasks.reducer\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {TodoListsType} from \"../app/App\";\r\nimport {TodoList} from \"./todolist/todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {MainReducerType} from \"../../store/mainReducer\";\r\n\r\n\r\nexport type ToDoListPropsType = {\r\n}\r\n\r\n\r\nexport const TodoLists = React.memo((props: ToDoListPropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const todolistsFromState = useSelector<MainReducerType, TodoListsType>(state => state.todoLists)\r\n    const tasksFromState = useSelector<MainReducerType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<MainReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if(!todolistsFromState.length) {\r\n            dispatch(getTodolistsTC())\r\n        }\r\n    }, [])\r\n\r\n\r\n    const addTask = useCallback((todolistID: string, title: string) => {\r\n        dispatch(addTaskTC({todolistID, title}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\r\n        dispatch(changeTaskStatusTC({todolistId, taskId, status}))\r\n    }, [dispatch])\r\n\r\n    const deleteTask = useCallback((todolistID: string, taskId: string) => {\r\n        dispatch(deleteTaskTC({todolistID, taskId}))\r\n    }, [dispatch])\r\n\r\n    const onChangeTaskTitle = useCallback((todolistId: string, taskId: string, title: string) => {\r\n        dispatch(changeTaskTitleTC({todolistId, taskId, title}))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeTDlFilterAC({filter, todolistId}))\r\n    }, [dispatch])\r\n\r\n    const removeTDFunc = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistsTC({todolistId}))\r\n    }, [dispatch])\r\n\r\n    const addTDList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC({title}))\r\n    }, [dispatch])\r\n\r\n    const changeTDListTitleAPP = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC({todolistId, title}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm callback={addTDList} label={'new todolist title'}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {todolistsFromState.map(tl => {\r\n                        let filteredTasks = tasksFromState[tl.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <TodoList\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={filteredTasks}\r\n                                    deleteTask={deleteTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    removeTDFunc={removeTDFunc}\r\n                                    onChangeTaskTitle={onChangeTaskTitle}\r\n                                    changeTDListTitleAPP={changeTDListTitleAPP}\r\n                                    todolist={tl}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    }\r\n                )}\r\n            </Grid>\r\n        </>\r\n\r\n\r\n    )\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AlertProps, Snackbar} from \"@mui/material\";\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport {setAppErrorAC} from \"../../Reducers/app-reducer\";\r\nimport {MainReducerType} from \"../../store/mainReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    //const [open, setOpen] = React.useState(true);\r\n\r\n    const error = useSelector<MainReducerType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n        //setOpen(false);\r\n    };\r\n\r\n\r\n    const isOpen = error !== null\r\n\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} /*onClose={handleClose}*/>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import {sliceTodolist} from \"../todolist-reducer\";\r\nimport {sliceAuth} from \"../authReducer\";\r\nimport {sliceApp} from \"../app-reducer\";\r\nimport {sliceTasks} from \"../tasks.reducer\";\r\n\r\nexport const todolistsReducer = sliceTodolist.reducer\r\n\r\nexport const authReducer = sliceAuth.reducer\r\n\r\nexport const appReducer = sliceApp.reducer\r\n\r\nexport const tasksReducer = sliceTasks.reducer","import {combineReducers} from \"redux\";\r\nimport {appReducer, authReducer, tasksReducer, todolistsReducer} from \"../Reducers/reducer/all-reducer\";\r\n\r\nexport type MainReducerType = ReturnType<typeof mainReducer>\r\nexport let mainReducer = combineReducers({\r\n    app: appReducer,\r\n    todoLists: todolistsReducer,\r\n    login: authReducer,\r\n    tasks: tasksReducer,\r\n})","import thunk from \"redux-thunk\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {mainReducer} from \"./mainReducer\";\r\n\r\n//export let store = createStore(mainReducer, applyMiddleware(thunk)) //redux approach\r\n\r\nexport const store = configureStore({ //redux toolkit approach\r\n    reducer: mainReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nif(process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./mainReducer', () => {\r\n       store.replaceReducer(mainReducer)\r\n    })\r\n}\r\n\r\n// @ts-ignore\r\nwindow['store'] = store","import {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\"\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from \"react-redux\";\r\nimport {authTC} from \"../../Reducers/authReducer\";\r\nimport {useAppDispatch} from \"../../store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {MainReducerType} from \"../../store/mainReducer\";\r\n\r\ntype FormValuesTypes = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<MainReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'insert correct email'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    email: 'password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesTypes>) => {\r\n           const action = await dispatch(authTC(values))\r\n            if (authTC.rejected.match(action)) {\r\n                if(action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n\r\n            }\r\n\r\n            //if (res === 'bad') { } // show error\r\n        }\r\n    })\r\n\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'} />\r\n    }\r\n\r\n\r\n    return  <Grid container justifyContent='center'>\r\n        <Grid item m={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in, please, get registration <a href={'https://social-network.samuraijs.com/'}\r\n                                                                   target={'_blank'}\r\n                                                                   rel={\"noreferrer\"}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use these test account credentials:\r\n                        </p>\r\n                        <p>\r\n                            Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label='email'\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            label='password'\r\n                            margin=\"normal\"\r\n                            type=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')} color={'secondary'}/>}\r\n                            label={'Remember me'}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'secondary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport '../../App.css';\r\nimport {TodoLists} from \"../todoList/TodoLists\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TodolistDomainType} from \"../../Reducers/todolist-reducer\";\r\nimport {ErrorSnackBar} from \"../errorSnackBar/ErrorSnackBar\";\r\nimport {initializeAppTC, RequestStatusType} from \"../../Reducers/app-reducer\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {logOutTC} from '../../Reducers/authReducer';\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../login/login\";\r\nimport {Navigate} from \"react-router\";\r\nimport {MainReducerType} from \"../../store/mainReducer\";\r\n\r\nexport type TodoListsType = Array<TodolistDomainType>\r\n\r\ntype PropsType = {\r\n}\r\n\r\nfunction App(props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<MainReducerType, boolean>(state => state.app.isAppInitialized)\r\n    const isLoggedIn = useSelector<MainReducerType, boolean>(state => state.login.isLoggedIn)\r\n    const status = useSelector<MainReducerType, RequestStatusType>(state => state.app.status)\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [dispatch])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        //dispatch(clearReduxAC()) //fix tasks fetching\r\n        dispatch(logOutTC())\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{display: \"flex\", justifyContent: \"center\", marginTop: \"30%\"}}><CircularProgress/></div>\r\n    }\r\n\r\n    return (\r\n        <div style={{flexGrow: 1, background: '#E0E0E0', minHeight: '100vh', paddingBottom: '20px'}}>\r\n            <AppBar position=\"static\" color=\"default\">\r\n                <Toolbar>\r\n                    <ErrorSnackBar/>\r\n                    <IconButton edge=\"start\" style={{marginRight: 2}} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" style={{flexGrow: 1}} align='center'>\r\n                        ToDoList\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={() => {\r\n                        logOutHandler()\r\n                    }}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/TodoList-v2'} element={<Navigate to={'login'}/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/'} element={<TodoLists/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './store/store';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nexport const reRenderEntireApp = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <HashRouter>\r\n                    <App/>\r\n                </HashRouter>\r\n            </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nreRenderEntireApp()\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nif(process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./components/app/App', () => {\r\n        reRenderEntireApp()\r\n    })\r\n    /*module.hot.accept('./store/store', () => {\r\n        reRenderEntireApp()\r\n    })*/\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskName\":\"Tasks_taskName__2PRlL\",\"completedTask\":\"Tasks_completedTask__8p0u7\"};"],"sourceRoot":""}